%{
	#include <cerrno>
	#include <climits>
	#include <cstdlib>
	#include <cstring>
	#include <string>
	#include "driver.hpp"
	#include "exception.hpp"
	#include "parser.hpp"
%}

%option noyywrap nounput noinput batch debug

%{
	yy::parser::symbol_type make_NUMBER(
		const std::string &s, const yy::parser::location_type& loc
	);
	yy::parser::symbol_type make_ARGID(
		const std::string &s, const yy::parser::location_type& loc
	);
%}

comment \/\/[^\n]*
arg \$[0-9]+
id [a-zA-Z][a-zA-Z_0-9]*
string \"([^\\\"]|\\.)*\"
int [0-9]+
blank [ \t\r]

%{
	// Code run each time a pattern is matched.
	#define YY_USER_ACTION loc.columns(yyleng);
%}

%%
%{
	// A handy shortcut to the location held by the driver.
	yy::location& loc = drv.location;
	// Code run each time yylex is called.
	loc.step();
%}

{comment} loc.step();
{blank}+ loc.step();
\n+ loc.lines(yyleng); loc.step();

"=" return yy::parser::make_ASSIGN(loc);
"+=" return yy::parser::make_PLUS(loc);
"-=" return yy::parser::make_MINUS(loc);
"*=" return yy::parser::make_STAR(loc);
"/=" return yy::parser::make_SLASH(loc);
"&&" return yy::parser::make_AND(loc);
"||" return yy::parser::make_OR(loc);
"==" return yy::parser::make_EQU(loc);
"!=" return yy::parser::make_NOT(loc);
"(" return yy::parser::make_LPAREN(loc);
")" return yy::parser::make_RPAREN(loc);
"{" return yy::parser::make_LBRACE(loc);
"}" return yy::parser::make_RBRACE(loc);
":" return yy::parser::make_COLON(loc);
"..." return yy::parser::make_ELLIPSES(loc);
";" return yy::parser::make_SEMICOLON(loc);
"," return yy::parser::make_COMMA(loc);

"env" return yy::parser::make_ENV(loc);
"asm" return yy::parser::make_ASM(loc);
"def" return yy::parser::make_DEF(loc);
"mac" return yy::parser::make_MAC(loc);
"use" return yy::parser::make_USE(loc);
"terminator" return yy::parser::make_TERM(loc);
"section" return yy::parser::make_SECT(loc);
"pool" return yy::parser::make_POOL(loc);
"const" return yy::parser::make_CONST(loc);
"typedef" return yy::parser::make_TYPEDEF(loc);
"typedef_big" return yy::parser::make_TYPEBIG(loc);
"drop" return yy::parser::make_DROP(loc);

{int} return make_NUMBER(yytext, loc);
{arg} return make_ARGID(yytext, loc);
{id} return yy::parser::make_IDENTIFIER(yytext, loc);
{string} {
	std::string str = yytext;
	str.erase(str.begin());
	str.erase(str.end() - 1);
	return yy::parser::make_STRING(str, loc);
}
. {
	throw yy::parser::syntax_error(
		loc, "invalid character: " + std::string(yytext)
	);
}
<<EOF>>    return yy::parser::make_YYEOF (loc);
%%

yy::parser::symbol_type make_NUMBER(
	const std::string &s, const yy::parser::location_type& loc
) {
	errno = 0;
	long n = strtol(s.c_str(), NULL, 10);
	if (!(INT_MIN <= n && n <= INT_MAX && errno != ERANGE)) {
		throw yy::parser::syntax_error(
			loc, "integer is out of range: " + s
		);
	}
	return yy::parser::make_NUMBER((int) n, loc);
}

yy::parser::symbol_type make_ARGID(
	const std::string &s, const yy::parser::location_type& loc
) {
	errno = 0;
	long n = strtol(s.c_str() + 1, NULL, 10);
	if (!(INT_MIN <= n && n <= INT_MAX && errno != ERANGE)) {
		throw yy::parser::syntax_error(
			loc, "integer is out of range: " + s
		);
	}
	return yy::parser::make_ARGID((int) n, loc);
}

void driver::scan_begin() {
	yy_flex_debug = trace_scanning;
	if (file.empty() || file == "-") {
		yyin = stdin;
	} else if (!(yyin = fopen(file.c_str(), "r"))) {
		fatal("failed to open %s: %s\n", file.c_str(), strerror(errno));
	}
}

void driver::scan_end () {
	fclose(yyin);
}
