// The following types are provided by evscript:
// u8
// u16
// u24
// u32

// Additional types may be defined using the `typedef` keyword, if another size
// or alias is required.
typedef string = u16;

// An environment is used to define a set of commands.
// The "std" or standard environment is automatically provided, and contains all
// commands needed by the evscript language. Without it, many features will be
// missing.

env script {
	// An environment can include other environments with the `use` keyword. Most
	// users will want to begin by importing the standard commands using `use std`.
	// If this is not included, control structures such as `if` and `while`, and
	// operators such as `=` and `+` will not be available.
	use std;
	// Commands are defined using the `def` keyword followed by an identifier
	// and a set of parenthesis. The parenthesis contain argument types.
	// If the argument is a constant value, the `const` keyword should be used.
	def move_actor(u16, const u8, const u8);
	// The `mac` keyword can be used to define an alias for another command,
	// optionally defining default arguments. `\n` stands for the nth argument,
	// which should be passed into the target command.
	mac move_player(const u8, const u8) = move_actor(wPlayer, $1, $2);
	// Additionally, `mac` can be used to alias an RGBASM macro, if the value on
	// the right is not a command. This allows you to use varargs. 
	mac print(const u16, ...) = print_string;

	// If a string is passed to a `const` argument, evscript will define the
	// string at the end of the script, and replace the argument with a pointer
	// to it.

	// The `pool` keyword is used to define how large the array of memory used
	// to store local variables is. This must be provided via pointer by the
	// user, and should be unique for each concurrently running script.
	pool = 32;
}

// Begin a script by specifying the environment you wish to use.
// Then, provide an identifier, which will become an exported label in the
// assembly output.
script HelloWorld {
	// Within a script, all evscript features are available so long as the
	// standard environment is available.
	// Any environment with a pool can define variables. However, without the
	// standard environment they cannot be initialized.

	// If an unknown variable name ever appears in an assignment expression,
	// evscript will assume it is a global variable.
	// For a global to be used in an operation, it must first be pulled into
	// a local variable.
	u8 value = wGlobalVar;
	value += 1;
	value -= 2;
	value *= 3;
	value /= 4;
	wGlobalVar = value;
	u8 another = 2;
	value = another;

	// Commands can be easily called as if they are functions.	
	move_player(1, 1);
	move_actor(wEnemy, 3, 1);

	if value = 4 {
		value = 5;
	} else if value = 5 {
		value = 6;
	}

	// The standard environment defines `yield()`, which is nearly identical to
	// `return()`. It's intended for scripts which should pick up later, for
	// example an entity's logic which must wait for the next tick.
	yield;

	print("Hello, world!");

	// Since the standard environment defines a terminator, there is no need
	// to write `return` at the end of the script.
}

include "simple.evs";
